// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NEXTAUTH
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  credit          Int       @default(5)
  custom_ai_models CustomAiModel[]
  image_prompts    ImagePrompt[]
  generated_images GeneratedImage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
// NEXTAUTH
enum Status {
  created
  generating
  failed
}

enum Visibility {
  private
  public
}


model CustomAiModel {
  id String    @id @default(cuid())

  replicate_model_id      String @unique
  replicate_model_version String
  replicate_destination   String

  status            Status @default(generating)  
  input_images_url  String?
  cover_image       String?
  model_nickname    String
  visibility        Visibility @default(private)

  user_id String?
  user    User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  image_prompts ImagePrompt[]
  generated_images GeneratedImage[]
  
  created_at DateTime @default(now())
}

model ImagePrompt {
  id String    @id @default(cuid())

  prompt            String
  negative_prompt   String @default("")
  width             Int
  height            Int
  number_of_outputs Int @default(1)
  seed              BigInt

  replicate_id  String @unique

  status        Status    @default(generating)
  error         String?
  created_at    DateTime  @default(now())

  custom_ai_model_id  String
  custom_ai_model     CustomAiModel     @relation(fields: [custom_ai_model_id], references: [id], onDelete: Cascade)
  user_id             String
  user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  generated_images GeneratedImage[]
}

model GeneratedImage {
  id  String    @id @default(cuid())

  url String

  custom_ai_model_id  String
  custom_ai_model     CustomAiModel     @relation(fields: [custom_ai_model_id], references: [id], onDelete: Cascade)
  image_prompt_id String
  image_prompt    ImagePrompt     @relation(fields: [image_prompt_id], references: [id], onDelete: Cascade)
  user_id         String
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
}